package lollipop.domain.movies


create DtDefinition DtCommune {
	id idInsee						{ domain : DoId,		  			label : "idInsee"}
	field codePostal				{ domain : DoCodePostal,  			label : "codePostal", 			cardinality: "?"}
	field commune					{ domain : DoLabel,  				label : "commune", 			cardinality: "?"}
	field departement				{ domain : DoLabel,  				label : "departement", 			cardinality: "?"}
}

create DtDefinition DtOuiNonChoice {
	id key							{ domain : DoOuiNon,		  		label : "Valeur"}
	field libelle					{ domain : DoLabel,  				label : "Libellé", 			cardinality: "?"}
}

alter DtDefinition DtMovie {
	field lastModified 		{ domain : DoLastModified,  		label : "lastModified",		cardinality: "?"}
}

create DtDefinition DtMovieDisplay {
	field movId 			{ domain : DoId,  					label : "id", 				cardinality: "?"}
	field title				{ domain : DoLabel,  				label : "Title", 			cardinality: "?"}
}

create DtDefinition DtMovieIndex {
	field movId 			{ domain : DoId,  					label : "id", 				cardinality: "?"}
	field title				{ domain : DoLabel,  				label : "Title", 			cardinality: "?"}
	field titleSortOnly		{ domain : DoTextNotTokenized,  	label : "label", 			cardinality: "?"}
	field originalTitle		{ domain : DoLabel,  				label : "Original Title", 	cardinality: "?"}
	field synopsis			{ domain : DoText,  				label : "Synopsis", 		cardinality: "?"}
	field shortSynopsis		{ domain : DoText,  				label : "Synopsis", 		cardinality: "?"}
	field keywords			{ domain : DoLabel,  				label : "keywords", 		cardinality: "?"}
	field poster			{ domain : DoTextNotTokenized,  	label : "poster", 			cardinality: "?"}
	field runtime			{ domain : DoDuration,  			label : "runtime", 			cardinality: "?"}
	field movieType			{ domain : DoLabel,  				label : "Movie type", 		cardinality: "?"}
	field productionYear	{ domain : DoYear,  				label : "productionYear", 	cardinality: "?"}
	field userRating		{ domain : DoRating,  				label : "userRating", 		cardinality: "?"}
	field pressRating		{ domain : DoRating,  				label : "pressRating", 		cardinality: "?"}
	field camera			{ domain : DoMultiValues,  			label : "Camera", 			cardinality: "?"}
}



/************************/
/***** Index Movie  *****/
/************************/

create IndexDefinition IdxMovie {  
  keyConcept : DtMovie
  dtIndex : DtMovieIndex
  loaderId : "MovieSearchLoader"
}

create FacetDefinition FctScope {  
  dtDefinition: DtMovieIndex, fieldName:"movieType", label:"Par scope"
}

create FacetDefinition FctMovieType {  
  dtDefinition: DtMovieIndex, fieldName:"movieType", label:"Par type"
}

create FacetDefinition FctMovieTitle {  
  dtDefinition: DtMovieIndex, fieldName:"titleSortOnly", label:"Par titre"
  range r1 { filter:"titleSortOnly:[* TO a]", label:"#"},
  range r2 { filter:"titleSortOnly:[a TO g]", label:"a-f"},
  range r3 { filter:"titleSortOnly:[g TO n]", label:"g-m"},
  range r4 { filter:"titleSortOnly:[n TO t]", label:"n-s"},
  range r5 { filter:"titleSortOnly:[t TO *]", label:"t-z"},
}

create FacetDefinition FctMovieYear {  
  dtDefinition: DtMovieIndex, fieldName:"productionYear", label:"Par date"
  range r1 { filter:"productionYear:[* TO 1930]", label:"< années 30"},
  range r2 { filter:"productionYear:[1930 TO 1940]", label:"années 30"},
  range r3 { filter:"productionYear:[1940 TO 1950]", label:"années 40"},
  range r4 { filter:"productionYear:[1950 TO 1960]", label:"années 50"},
  range r5 { filter:"productionYear:[1960 TO 1970]", label:"années 60"},
  range r6 { filter:"productionYear:[1970 TO 1980]", label:"années 70"},
  range r7 { filter:"productionYear:[1980 TO 1990]", label:"années 80"},
  range r8 { filter:"productionYear:[1990 TO 2000]", label:"années 90"},
  range r9 { filter:"productionYear:[2000 TO 2010]", label:"années 2000"},
  range r10 { filter:"productionYear:[2010 TO *]", label:"> années 2010"},  
}

create FacetedQueryDefinition QryMovie {  
  keyConcept : DtMovie
  facets : [FctMovieType, FctMovieTitle, FctMovieYear]
  domainCriteria : DoLabel
  listFilterBuilderClass : "io.vertigo.dynamox.search.DslListFilterBuilder"  
  listFilterBuilderQuery : "_all:#+query*#"
}

create FacetedQueryDefinition QryMovieWithPoster {  
  keyConcept : DtMovie
  facets : [FctMovieType, FctMovieTitle, FctMovieYear]
  domainCriteria : DoLabel
  listFilterBuilderClass : "io.vertigo.dynamox.search.DslListFilterBuilder"  
  listFilterBuilderQuery : "_all:#+query*# +_exists_:poster"
}
